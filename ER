from pyspark.sql.functions import col

# Force index and row_index_distorted to string type
stats = stats.withColumn("index", col("index").cast("string"))
stats = stats.withColumn("row_index_distorted", col("row_index_distorted").cast("string"))

# Write to the table
stats.write.mode("overwrite").saveAsTable("watch_aid_edp_sh.watch-aid-edp-entity-resolution.stats_rblev_beta12")








from pyspark.sql.functions import regexp_replace, col
scenarios_clean = scenarios.withColumn(
    "index_clean",
    regexp_replace(col("index"), "-.*", "").cast(IntegerType())
)








from pyspark.sql.functions import col, when
from pyspark.sql.types import IntegerType

# Fix cast in scenarios
scenarios = spark.table("`watech_aid_edp_sh`.`watech-aid-edp-entity-resolution.watech_mwd_scenarios`")\
    .withColumn(
        "scenario_distorted",
        when(col("index").rlike("^[0-9]+$"), col("index").cast(IntegerType())).otherwise(None)
    )

# Union and join
stats = stats1.unionByName(stats2).join(scenarios, "scenario_distorted")

# Filter
stats = stats.filter(
    (~(col("row_index_distorted") % 2 == 1)) &
    (
        (col("index") == "61") |
        (col("index") == "62") |
        (col("index") == "63")
    )
)

# Save with backtick
stats.write \
    .mode("overwrite") \
    .option("overwriteSchema", "true") \
    .saveAsTable("`watech_aid_edp_sh`.`watech-aid-edp-entity-resolution.stats_rblev_beta`")
